!function(e){e.fn.sidebar=function(i){function s(){n.trigger("sidebar:close",[{speed:0}])}var n=this;if(n.length>1)return n.each(function(){e(this).sidebar(i)});var o=(n.outerWidth(),n.outerHeight(),e.extend({speed:200,side:"left",isClosed:!1,close:!0},i));return n.on("sidebar:open",function(i,s){var t={};t[o.side]=0,o.isClosed=null,n.stop().animate(t,e.extend({},o,s).speed,function(){o.isClosed=!1,n.trigger("sidebar:opened")})}),n.on("sidebar:close",function(i,s){var t={};"left"===o.side||"right"===o.side?t[o.side]=-n.outerWidth():t[o.side]=-n.outerHeight(),o.isClosed=null,n.stop().animate(t,e.extend({},o,s).speed,function(){o.isClosed=!0,n.trigger("sidebar:closed")})}),n.on("sidebar:toggle",function(e,i){o.isClosed?n.trigger("sidebar:open",[i]):n.trigger("sidebar:close",[i])}),!o.isClosed&&o.close&&s(),e(window).on("resize",function(){o.isClosed&&s()}),n.data("sidebar",o),n},e.fn.sidebar.version="3.3.2"}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
